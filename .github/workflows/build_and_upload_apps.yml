name: Build and Upload Artifacts

# @semantic-release/github publishes the release as final step
on:
  release:
    types: [published]

jobs:
  build:
    name: Build Tauri Apps and upload to release

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install Dependencies for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install node packages
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: "BPMN v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false

      # - name: Bundle application
      #   run: yarn run tauri build
      #   env:
      #     TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Store signature as artifact
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: release-signature-${{ runner.os }}-${{ github.ref_name }}
          path: src-tauri/target/release/bundle/appimage/bpmn-modeler_*_amd64.AppImage.tar.gz.sig

      # - name: Store signature as artifact
      #   uses: actions/upload-artifact@v4
      #   if: matrix.os == 'macos-latest'
      #   with:
      #     name: release-signature-${{ runner.os }}-${{ github.ref_name }}
      #     path: src-tauri/target/release/bundle/macos/*.app.tar.gz.sig

      - name: Store signature as artifact
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: release-signature-${{ runner.os }}-${{ github.ref_name }}
          path: src-tauri/target/release/bundle/msi/*.msi.zip.sig

      # seems like the action already does that for us :-D
      # - name: Attach binary to tags
      #   run: node ci/attachBinariesToRelease.mjs ${{ secrets.PAT }} ${{ matrix.os }}

  update:
    name: Update the Tauri updater file
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write

    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          ref: tauri-updates

      - name: Download signature file for Linux
        id: signature-linux
        uses: actions/download-artifact@v4.1.7
        with:
          name: release-signature-Linux-${{ github.ref_name }}

      # - name: Download signature file for MacOS
      #   id: signature-macos
      #   uses: actions/download-artifact@v4.1.7
      #   with:
      #     name: release-signature-macOS-${{ github.ref_name }}

      - name: Download signature file for Windows
        id: signature-windows
        uses: actions/download-artifact@v4.1.7
        with:
          name: release-signature-Windows-${{ github.ref_name }}

      - name: Create update file
        run: ./create-update.sh "${{ github.ref_name }}" ${{ steps.signature-linux.outputs.download-path }} ${{ steps.signature-windows.outputs.download-path }}

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "update for release ${{ github.ref_name }}"
          file_pattern: "update.json"
